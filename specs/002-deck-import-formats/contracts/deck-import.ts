/**
 * Deck Import Formats - TypeScript Contracts
 * 
 * This file defines all TypeScript interfaces and types for the deck import feature.
 * These contracts ensure type safety across parsing, validation, and transformation logic.
 * 
 * Feature: 002-deck-import-formats
 * Branch: 002-deck-import-formats
 * Generated: 2025-10-27
 */

// ============================================================================
// ENUMS & CONSTANTS
// ============================================================================

/**
 * Available deck import formats.
 * 
 * @remarks
 * - TTS: Tabletop Simulator format (space-separated codes like "OGN-253-1")
 * - JSON: Structured JSON format matching sample-deck.json schema
 */
export type ImportFormat = 'tts' | 'json';

/**
 * Base URL for TTS card images on riftmana.com
 */
export const TTS_IMAGE_BASE_URL = 'https://riftmana.com/wp-content/uploads/Cards/';

/**
 * Regex pattern for valid TTS card codes.
 * Format: SET-NUMBER-QUANTITY (e.g., "OGN-253-1")
 * 
 * @example
 * "OGN-253-1" ✓ Valid
 * "ABC-123-1" ✓ Valid
 * "SET-SUB-456-2" ✓ Valid (multiple hyphens OK)
 * "ABC123" ✗ Invalid (no hyphens)
 * "OGN-ABC-1" ✗ Invalid (letters in number field)
 */
export const TTS_CODE_PATTERN = /^[A-Z0-9]+-[0-9]+-[0-9]+$/;

/**
 * Maximum file size for imports (5MB).
 * Prevents browser freeze on extremely large JSON files.
 */
export const MAX_IMPORT_SIZE_BYTES = 5 * 1024 * 1024;

// ============================================================================
// TTS FORMAT TYPES
// ============================================================================

/**
 * Parsed TTS card code with all extracted components.
 * 
 * @remarks
 * Generated by parseTTSCode() function. Contains both the original code
 * and all parsed segments for validation and URL construction.
 * 
 * @example
 * ```typescript
 * const code: TTSCardCode = {
 *   raw: "OGN-253-1",
 *   set: "OGN",
 *   number: "253",
 *   quantity: "1",
 *   imageCode: "OGN-253",
 *   imageUrl: "https://riftmana.com/wp-content/uploads/Cards/OGN-253.webp"
 * };
 * ```
 */
export interface TTSCardCode {
  /** Original code as entered by user (e.g., "OGN-253-1") */
  raw: string;
  
  /** Card set identifier (e.g., "OGN") */
  set: string;
  
  /** Card number within set (e.g., "253") */
  number: string;
  
  /** Quantity suffix (e.g., "1") - always present in TTS format */
  quantity: string;
  
  /** Code without quantity suffix (e.g., "OGN-253") - used for image URL */
  imageCode: string;
  
  /** Fully constructed image URL */
  imageUrl: string;
}

/**
 * Result of parsing TTS input string.
 * 
 * @remarks
 * Contains successfully parsed codes and any errors encountered.
 * Warnings are non-critical (e.g., skipped invalid codes).
 */
export interface TTSParseResult {
  /** Successfully parsed card codes */
  codes: TTSCardCode[];
  
  /** Error messages for invalid codes that were skipped */
  warnings: string[];
  
  /** Total number of codes found (including invalid) */
  totalFound: number;
}

// ============================================================================
// JSON FORMAT TYPES
// ============================================================================

/**
 * Card metadata from JSON import.
 * 
 * @remarks
 * Flexible structure allows any valid JSON properties.
 * Common fields from sample-deck.json:
 * - type: "creature" | "spell"
 * - power: number (for creatures)
 * - cost: number (mana cost)
 * - damage/healing/defense: number (for spells)
 * - effect: string (spell effect description)
 */
export type CardMetadata = Record<string, unknown>;

/**
 * Single card definition in JSON import format.
 * 
 * @remarks
 * Matches the structure from public/sample-deck.json.
 * All fields are required except imageUrl (optional override).
 * 
 * @example
 * ```typescript
 * const card: JSONCardData = {
 *   id: "wizard-001",
 *   name: "Arcane Wizard",
 *   metadata: {
 *     type: "creature",
 *     power: 3,
 *     cost: 4
 *   },
 *   imageUrl: "https://custom.com/wizard.png" // optional
 * };
 * ```
 */
export interface JSONCardData {
  /** Unique identifier within JSON (not used as game Card.id) */
  id: string;
  
  /** Human-readable card name */
  name: string;
  
  /** Arbitrary card properties (type, power, cost, etc.) */
  metadata?: CardMetadata;
  
  /** Optional custom image URL (overrides default placeholder) */
  imageUrl?: string;
}

/**
 * Complete deck import structure for JSON format.
 * 
 * @remarks
 * Top-level structure of imported JSON files.
 * Deck name is required but not currently used in game state.
 * Future: Could display deck name in UI or save for reference.
 * 
 * @example
 * ```typescript
 * const deck: JSONDeckData = {
 *   name: "Sample Fantasy Deck",
 *   cards: [
 *     { id: "wizard-001", name: "Arcane Wizard", metadata: {...} },
 *     { id: "warrior-001", name: "Brave Knight", metadata: {...} }
 *   ]
 * };
 * ```
 */
export interface JSONDeckData {
  /** Deck name/title (required but not persisted in v1) */
  name: string;
  
  /** Array of card definitions (minimum 1 required) */
  cards: JSONCardData[];
}

// ============================================================================
// VALIDATION TYPES
// ============================================================================

/**
 * Severity level for validation messages.
 */
export type ValidationSeverity = 'error' | 'warning' | 'info';

/**
 * Single validation message with context.
 * 
 * @remarks
 * Used to provide detailed feedback about import issues.
 * Path helps users locate problems in JSON structure.
 */
export interface ValidationMessage {
  /** Severity of the message */
  severity: ValidationSeverity;
  
  /** Human-readable message */
  message: string;
  
  /** JSON path or code reference (e.g., "cards[2].name" or "code 3") */
  path?: string;
  
  /** Original value that caused the issue (for debugging) */
  value?: unknown;
}

/**
 * Result of validating import input.
 * 
 * @remarks
 * Returned by validateImport() function. Contains validation status,
 * parsed data (if valid), and detailed messages for user feedback.
 * 
 * @example
 * ```typescript
 * // Success case:
 * const result: ImportValidationResult = {
 *   valid: true,
 *   format: 'tts',
 *   cardCount: 5,
 *   messages: []
 * };
 * 
 * // Error case:
 * const result: ImportValidationResult = {
 *   valid: false,
 *   format: 'json',
 *   cardCount: 0,
 *   messages: [{
 *     severity: 'error',
 *     message: 'Missing required field',
 *     path: 'cards[2].name'
 *   }]
 * };
 * ```
 */
export interface ImportValidationResult {
  /** Whether input passed validation */
  valid: boolean;
  
  /** Which format was validated */
  format: ImportFormat;
  
  /** Number of valid cards found (0 if invalid) */
  cardCount: number;
  
  /** Detailed validation messages (errors, warnings, info) */
  messages: ValidationMessage[];
  
  /** Parsed data if validation succeeded (undefined if failed) */
  data?: TTSParseResult | JSONDeckData;
}

// ============================================================================
// UI STATE TYPES
// ============================================================================

/**
 * UI state for the deck import component.
 * 
 * @remarks
 * Manages format selection, input content, and validation state.
 * Both format inputs are preserved independently to support format switching.
 * 
 * @example
 * ```typescript
 * const [state, setState] = useState<DeckImportState>({
 *   format: 'tts',
 *   ttsInput: 'OGN-253-1 OGN-004-1',
 *   jsonInput: '',
 *   validation: null,
 *   isImporting: false
 * });
 * ```
 */
export interface DeckImportState {
  /** Currently selected format */
  format: ImportFormat;
  
  /** Content of TTS textarea (preserved when switching to JSON) */
  ttsInput: string;
  
  /** Content of JSON textarea (preserved when switching to TTS) */
  jsonInput: string;
  
  /** Latest validation result (null if no validation yet) */
  validation: ImportValidationResult | null;
  
  /** Whether import operation is in progress */
  isImporting: boolean;
}

// ============================================================================
// CARD EXTENSIONS
// ============================================================================

/**
 * Extended Card properties for import tracking.
 * 
 * @remarks
 * These fields extend the base Card interface from app/lib/types/game.ts.
 * Used to preserve import source and original identifiers for debugging.
 * 
 * @example
 * ```typescript
 * const card: Card & ImportCardExtensions = {
 *   id: "uuid-here",
 *   imageUrl: "https://...",
 *   importSource: 'tts',
 *   ttsCode: "OGN-253-1",
 *   importedAt: new Date()
 * };
 * ```
 */
export interface ImportCardExtensions {
  /** Which format created this card */
  importSource?: 'tts' | 'json';
  
  /** Original TTS code (if from TTS import) */
  ttsCode?: string;
  
  /** Original JSON id (if from JSON import) */
  jsonId?: string;
  
  /** Timestamp when card was imported */
  importedAt?: Date;
}

// ============================================================================
// PARSER FUNCTION TYPES
// ============================================================================

/**
 * Function signature for TTS code parser.
 * 
 * @param input - Raw input string from textarea
 * @returns Parse result with codes and warnings
 * 
 * @throws Never throws - all errors converted to warnings
 */
export type TTSParser = (input: string) => TTSParseResult;

/**
 * Function signature for JSON deck parser.
 * 
 * @param input - Raw JSON string from textarea
 * @returns Parsed deck data
 * 
 * @throws {SyntaxError} If JSON is malformed
 * @throws {ZodError} If JSON doesn't match schema
 */
export type JSONParser = (input: string) => JSONDeckData;

/**
 * Function signature for import validator.
 * 
 * @param format - Which format to validate
 * @param input - Raw input string
 * @returns Validation result with messages
 */
export type ImportValidator = (
  format: ImportFormat,
  input: string
) => ImportValidationResult;

/**
 * Function signature for card transformer.
 * Converts parsed import data into game Card objects.
 * 
 * @param data - Parsed TTS or JSON data
 * @param format - Which format the data came from
 * @returns Array of Card objects ready for game state
 */
export type CardTransformer = (
  data: TTSParseResult | JSONDeckData,
  format: ImportFormat
) => Array<Card & ImportCardExtensions>;

// ============================================================================
// COMPONENT PROP TYPES
// ============================================================================

/**
 * Props for DeckImport component.
 * 
 * @remarks
 * Component displays format selector, textarea, validation messages,
 * and import button. Calls onImport when user completes import.
 */
export interface DeckImportProps {
  /** Callback when user successfully imports cards */
  onImport: (cards: Array<Card & ImportCardExtensions>) => void;
  
  /** Whether import UI should be disabled (e.g., game in progress) */
  disabled?: boolean;
  
  /** Optional CSS class for styling */
  className?: string;
}

/**
 * Props for format selector component.
 */
export interface FormatSelectorProps {
  /** Currently selected format */
  selected: ImportFormat;
  
  /** Callback when user selects a format */
  onChange: (format: ImportFormat) => void;
  
  /** Whether selector should be disabled */
  disabled?: boolean;
}

/**
 * Props for validation message display component.
 */
export interface ValidationMessagesProps {
  /** Validation result to display */
  validation: ImportValidationResult | null;
  
  /** Optional CSS class for styling */
  className?: string;
}

// ============================================================================
// UTILITY TYPES
// ============================================================================

/**
 * Type guard to check if data is TTSParseResult.
 * 
 * @param data - Data to check
 * @returns True if data is TTSParseResult
 */
export function isTTSParseResult(
  data: TTSParseResult | JSONDeckData
): data is TTSParseResult {
  return 'codes' in data && Array.isArray((data as TTSParseResult).codes);
}

/**
 * Type guard to check if data is JSONDeckData.
 * 
 * @param data - Data to check
 * @returns True if data is JSONDeckData
 */
export function isJSONDeckData(
  data: TTSParseResult | JSONDeckData
): data is JSONDeckData {
  return 'name' in data && 'cards' in data && typeof (data as JSONDeckData).name === 'string';
}

// ============================================================================
// RE-EXPORTS & PLACEHOLDER TYPES
// ============================================================================

/**
 * Card type from game.ts - placeholder definition for contracts.
 * Actual implementation is in app/lib/types/game.ts
 * 
 * @remarks
 * This is a reference definition. When implementing, import from:
 * import type { Card } from '@/app/lib/types/game';
 */
export interface Card {
  id: string;
  name?: string;
  imageUrl?: string;
  metadata?: Record<string, unknown>;
}
